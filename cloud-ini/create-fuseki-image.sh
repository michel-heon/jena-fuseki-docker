#!/bin/bash
set -e  # Arr√™ter en cas d'erreur

# === Variables ===
source ./00-env.sh

# === √âtape 1: Cr√©er le groupe de ressources ===
echo "üìÅ Cr√©ation du groupe de ressources..."
az group create --name "$RESOURCE_GROUP" --location "$LOCATION"

# === √âtape 2: Cr√©er la VM avec cloud-init ===
echo "üñ•Ô∏è Cr√©ation de la VM avec cloud-init..."
az vm create \
  --resource-group "$RESOURCE_GROUP" \
  --name "$VM_NAME" \
  --image "$OS_IMAGE" \
  --size "$VM_SIZE" \
  --admin-username "$ADMIN_USER" \
  --admin-password "$ADMIN_PASSWORD" \
  --authentication-type password \
  --custom-data "$CLOUD_INIT_FILE" \
  --security-type Standard \
  --output none

# === √âtape 3: Ouvrir le port 3030 ===
echo "üåê Ouverture du port 3030 pour Fuseki..."
az vm open-port --port 3030 --resource-group "$RESOURCE_GROUP" --name "$VM_NAME"

# === Optionnel : Activer les diagnostics de d√©marrage ===
STORAGE_ACCOUNT="fusekistorage$RANDOM"
echo "üì¶ Cr√©ation du compte de stockage pour les diagnostics..."
az storage account create --name "$STORAGE_ACCOUNT" --resource-group "$RESOURCE_GROUP" --location "$LOCATION" --sku Standard_LRS
echo "üîç Activation des diagnostics de d√©marrage..."
az vm boot-diagnostics enable --resource-group "$RESOURCE_GROUP" --name "$VM_NAME" --storage "https://${STORAGE_ACCOUNT}.blob.core.windows.net/"

# === √âtape 4: Pause pour cloud-init ===
echo "‚è≥ Attente de 2 minutes pour la configuration cloud-init..."
sleep 120

# === √âtape 5: V√©rification de l‚Äôacc√®s public ===
PUBLIC_IP=$(az vm show --show-details \
  --name "$VM_NAME" \
  --resource-group "$RESOURCE_GROUP" \
  --query "publicIps" -o tsv)
echo "üåç Fuseki devrait √™tre accessible √† : http://$PUBLIC_IP:3030"

# === √âtape 6: Nettoyage de cloud-init pendant que la VM est en cours d'ex√©cution ===
echo "üßπ Nettoyage de l'√©tat cloud-init..."
az vm run-command invoke --command-id RunShellScript --resource-group "$RESOURCE_GROUP" --name "$VM_NAME" --scripts "sudo cloud-init clean"

# === √âtape 7: D√©sallocation et g√©n√©ralisation ===
echo "üßä D√©sallocation de la VM..."
az vm deallocate --resource-group "$RESOURCE_GROUP" --name "$VM_NAME"
echo "‚è≥ Attente de la d√©sallocation compl√®te..."
az vm wait --resource-group "$RESOURCE_GROUP" --name "$VM_NAME" --custom "instanceView.statuses[?code=='PowerState/deallocated']"

echo "üßº G√©n√©ralisation de la VM..."
az vm generalize --resource-group "$RESOURCE_GROUP" --name "$VM_NAME"

# === √âtape 8: Cr√©ation de l‚Äôimage ===
echo "üíø Cr√©ation de l'image √† partir de la VM g√©n√©ralis√©e..."
az image create --resource-group "$RESOURCE_GROUP" --name "$IMAGE_NAME" --source "$VM_NAME"  --hyper-v-generation V2

echo "‚úÖ Image '$IMAGE_NAME' cr√©√©e avec succ√®s dans le groupe '$RESOURCE_GROUP'."
